// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using v3Complation.DataAccess.Concrete.EntityFramework;

namespace v3Complation.DataAccess.Migrations
{
    [DbContext(typeof(v3Context))]
    [Migration("20200331221541_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("v3Complation.Entities.Concrete.BsBasePrice", b =>
                {
                    b.Property<int>("BasePriceCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BasePriceCode")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BasePriceDescription")
                        .IsRequired()
                        .HasColumnName("BasePriceDescription")
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("LanguageCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasePriceCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("bsBasePrices");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.BsItemDimType", b =>
                {
                    b.Property<int>("ItemDimTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemDimTypeCode")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemDimTypeDescription")
                        .IsRequired()
                        .HasColumnName("ItemDimTypeDescription")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemDimTypeCode");

                    b.ToTable("bsItemDimTypes");

                    b.HasData(
                        new
                        {
                            ItemDimTypeCode = 1,
                            ItemDimTypeDescription = "Varyantsiz",
                            RowGuid = new Guid("41e15164-51d3-4b41-a6ff-e07ac2e1bf97")
                        },
                        new
                        {
                            ItemDimTypeCode = 2,
                            ItemDimTypeDescription = "Renk",
                            RowGuid = new Guid("15f928d4-bc89-4342-b5fb-66750546569a")
                        },
                        new
                        {
                            ItemDimTypeCode = 3,
                            ItemDimTypeDescription = "RenkBeden",
                            RowGuid = new Guid("ef77f293-15a6-4db5-9a45-621247a28735")
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.BsItemType", b =>
                {
                    b.Property<int>("ItemTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemTypeDescription")
                        .IsRequired()
                        .HasColumnName("ItemTypeDescription")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTypeCode");

                    b.ToTable("bsItemTypes");

                    b.HasData(
                        new
                        {
                            ItemTypeCode = 1,
                            ItemTypeDescription = "Urun",
                            RowGuid = new Guid("f21d9b06-a130-4dd5-afa6-4e604d9a1a5c")
                        },
                        new
                        {
                            ItemTypeCode = 2,
                            ItemTypeDescription = "Malzeme",
                            RowGuid = new Guid("b1f1e16a-3ee3-4fe4-8314-860f8ff954dd")
                        },
                        new
                        {
                            ItemTypeCode = 4,
                            ItemTypeDescription = "Masraf",
                            RowGuid = new Guid("7f506d6a-1550-4ed9-92a0-f71741443d7d")
                        },
                        new
                        {
                            ItemTypeCode = 5,
                            ItemTypeDescription = "Servis",
                            RowGuid = new Guid("3382898c-c37d-458b-959b-8d99b81d82d4")
                        },
                        new
                        {
                            ItemTypeCode = 6,
                            ItemTypeDescription = "Sabit Kiymet",
                            RowGuid = new Guid("8c5281dc-658f-4a74-b026-7467c3ac9959")
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdBarcodeType", b =>
                {
                    b.Property<string>("BarcodeTypeCode")
                        .HasColumnName("BarcodeTypeCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("BarcodeTypeDescription")
                        .HasColumnName("BarcodeTypeDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("BarcodeTypeCode");

                    b.ToTable("cdBarcodeTypes");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdColor", b =>
                {
                    b.Property<string>("ColorCode")
                        .HasColumnName("ColorCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ColorDescription")
                        .IsRequired()
                        .HasColumnName("ColorDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnName("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("ColorCode");

                    b.ToTable("cdColors");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdCountry", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnName("CountryCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CountryDescription")
                        .IsRequired()
                        .HasColumnName("CountryDescription")
                        .HasColumnType("nvarchar(140)")
                        .HasMaxLength(140);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("LanguageCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountryCode");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("cdCountries");

                    b.HasData(
                        new
                        {
                            CountryCode = "TR",
                            CountryDescription = "Turkiye",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 788, DateTimeKind.Local).AddTicks(4697),
                            CurrencyCode = "TRY",
                            IsActive = true,
                            LanguageCode = "TR",
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 788, DateTimeKind.Local).AddTicks(4702),
                            RowGuid = new Guid("42c76ba4-2a4a-46a9-9da2-b05a0b960a8e")
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdCurrency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyDescription")
                        .IsRequired()
                        .HasColumnName("CurrencyDescription")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("LanguageCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurrencyCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("cdCurrencies");

                    b.HasData(
                        new
                        {
                            CurrencyCode = "TRY",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 772, DateTimeKind.Local).AddTicks(3699),
                            CurrencyDescription = "Türk Lirası",
                            IsActive = true,
                            LanguageCode = "TR",
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 772, DateTimeKind.Local).AddTicks(3704),
                            RowGuid = new Guid("b11a7e0d-fe21-47ea-92d6-bebad735815f")
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdHierarchy", b =>
                {
                    b.Property<int>("HierarchyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HierarchyCode")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HierarchyDescription")
                        .IsRequired()
                        .HasColumnName("HierarchyDescription")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentHierarchyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParentHierarchyCode")
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.HasKey("HierarchyCode");

                    b.ToTable("cdHierarchies");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdItem", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<short?>("ByWeight")
                        .HasColumnName("ByWeight")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnName("ItemDescription")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ItemDimTypeCode")
                        .HasColumnName("ItemDimTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemTaxGrCode")
                        .HasColumnName("ItemTaxGrCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("ItemTypeCode")
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitOfMeasureCode")
                        .HasColumnName("UnitOfMeasureCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("UseHome")
                        .HasColumnType("bit");

                    b.HasKey("ItemCode");

                    b.HasIndex("ItemDimTypeCode");

                    b.HasIndex("ItemTaxGrCode");

                    b.HasIndex("ItemTypeCode");

                    b.HasIndex("UnitOfMeasureCode");

                    b.ToTable("cdItems");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdItemDim1", b =>
                {
                    b.Property<string>("ItemDim1Code")
                        .HasColumnName("ItemDim1Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDim1Description")
                        .HasColumnName("ItemDim1Description")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnName("SortOrder")
                        .HasColumnType("int")
                        .HasMaxLength(444);

                    b.HasKey("ItemDim1Code");

                    b.ToTable("cdItemDim1s");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdItemTaxGr", b =>
                {
                    b.Property<string>("ItemTaxGrCode")
                        .HasColumnName("ItemTaxGrCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemTaxGrDescription")
                        .IsRequired()
                        .HasColumnName("ItemTaxGrDescription")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTaxGrCode");

                    b.ToTable("cItemTaxGrs");

                    b.HasData(
                        new
                        {
                            ItemTaxGrCode = "%0",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 696, DateTimeKind.Local).AddTicks(404),
                            IsActive = true,
                            ItemTaxGrDescription = "Vergisiz",
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 696, DateTimeKind.Local).AddTicks(408),
                            RowGuid = new Guid("1012e49c-942e-4ec2-a3c7-dafa57b6eaba")
                        },
                        new
                        {
                            ItemTaxGrCode = "%1",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 696, DateTimeKind.Local).AddTicks(966),
                            IsActive = true,
                            ItemTaxGrDescription = "%1 Vergi",
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 696, DateTimeKind.Local).AddTicks(968),
                            RowGuid = new Guid("920e6cba-f38b-4be2-a9c4-a3c50b5617a0")
                        },
                        new
                        {
                            ItemTaxGrCode = "%8",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 696, DateTimeKind.Local).AddTicks(977),
                            IsActive = true,
                            ItemTaxGrDescription = "%8 Vergi",
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 696, DateTimeKind.Local).AddTicks(977),
                            RowGuid = new Guid("45707b75-8192-40ad-bd70-9ed991582535")
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdLanguage", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnName("LanguageCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LanguageDescription")
                        .IsRequired()
                        .HasColumnName("LanguageDescription")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguageCode");

                    b.ToTable("cdLanguages");

                    b.HasData(
                        new
                        {
                            LanguageCode = "TR",
                            LanguageDescription = "Turkce",
                            RowGuid = new Guid("c6df3927-9d11-4780-bcbb-d413601fa6c3")
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdUnitOfMeasure", b =>
                {
                    b.Property<string>("UnitOfMeasureCode")
                        .HasColumnName("UnitOfMeasureCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitOfMeasureDescription")
                        .IsRequired()
                        .HasColumnName("UnitOfMeasureDescription")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("UnitOfMeasureCode");

                    b.ToTable("cdUnitOfMeasures");

                    b.HasData(
                        new
                        {
                            UnitOfMeasureCode = "AD",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 685, DateTimeKind.Local).AddTicks(6846),
                            IsActive = true,
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 686, DateTimeKind.Local).AddTicks(8720),
                            RowGuid = new Guid("11cb94b1-0f6e-4ece-803b-9f9497bf930e"),
                            UnitOfMeasureDescription = "Adet"
                        },
                        new
                        {
                            UnitOfMeasureCode = "KG",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 687, DateTimeKind.Local).AddTicks(244),
                            IsActive = true,
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 687, DateTimeKind.Local).AddTicks(249),
                            RowGuid = new Guid("ed6cb860-4c6d-41dd-9e8c-ab25413718ad"),
                            UnitOfMeasureDescription = "Kilo"
                        },
                        new
                        {
                            UnitOfMeasureCode = "GR",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 687, DateTimeKind.Local).AddTicks(270),
                            IsActive = true,
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 687, DateTimeKind.Local).AddTicks(270),
                            RowGuid = new Guid("3719097e-b3f0-42aa-ad31-7feb756c737f"),
                            UnitOfMeasureDescription = "Gram"
                        },
                        new
                        {
                            UnitOfMeasureCode = "L",
                            CreateDate = new DateTime(2020, 4, 1, 1, 15, 40, 687, DateTimeKind.Local).AddTicks(273),
                            IsActive = true,
                            ModifiedDate = new DateTime(2020, 4, 1, 1, 15, 40, 687, DateTimeKind.Local).AddTicks(274),
                            RowGuid = new Guid("581bb191-a356-42c1-8a61-522fee576106"),
                            UnitOfMeasureDescription = "Litre"
                        });
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemBarcode", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnName("Barcode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("BarcodeTypeCode")
                        .IsRequired()
                        .HasColumnName("BarcodeTypeCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnName("ColorCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ItemDim1Code")
                        .IsRequired()
                        .HasColumnName("ItemDim1Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("ItemTypeCode")
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitOfMeasureCode")
                        .IsRequired()
                        .HasColumnName("UnitOfMeasureCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Barcode");

                    b.HasIndex("BarcodeTypeCode");

                    b.HasIndex("ColorCode");

                    b.HasIndex("ItemCode");

                    b.HasIndex("ItemDim1Code");

                    b.HasIndex("ItemTypeCode");

                    b.HasIndex("UnitOfMeasureCode");

                    b.ToTable("prItemBarcodes");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemBasePrice", b =>
                {
                    b.Property<int>("ItemTypeCode")
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("BasePriceCode")
                        .HasColumnName("BasePriceCode")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnName("CountryCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("CurrencyCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("money");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnName("PriceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTypeCode", "ItemCode", "BasePriceCode", "CountryCode");

                    b.HasIndex("BasePriceCode");

                    b.HasIndex("CountryCode");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ItemCode");

                    b.ToTable("prItemBasePrices");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemHierarchy", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("HierarchyCode")
                        .HasColumnName("HierarchyCode")
                        .HasColumnType("int");

                    b.HasKey("ItemCode", "HierarchyCode");

                    b.HasIndex("HierarchyCode");

                    b.ToTable("prItemHierarchies");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemNote", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("ntext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemCode");

                    b.ToTable("prItemNotes");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemPhoto", b =>
                {
                    b.Property<int>("ItemTypeCode")
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ColorCode")
                        .HasColumnName("ColorCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnName("ImagePath")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTypeCode", "ItemCode", "ColorCode");

                    b.HasIndex("ColorCode");

                    b.HasIndex("ItemCode");

                    b.ToTable("prItemPhotos");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemVariant", b =>
                {
                    b.Property<int>("ItemTypeCode")
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ColorCode")
                        .HasColumnName("ColorCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ItemDim1Code")
                        .HasColumnName("ItemDim1Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTypeCode", "ItemCode", "ColorCode", "ItemDim1Code");

                    b.HasIndex("ColorCode");

                    b.HasIndex("ItemCode");

                    b.HasIndex("ItemDim1Code");

                    b.ToTable("prItemVariants");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.TrStock", b =>
                {
                    b.Property<int>("ItemTypeCode")
                        .HasColumnName("ItemTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasColumnName("ItemCode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ColorCode")
                        .HasColumnName("ColorCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ItemDim1Code")
                        .HasColumnName("ItemDim1Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Barcode")
                        .HasColumnName("Barcode")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RowGuid")
                        .HasColumnName("RowGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTypeCode", "ItemCode", "ColorCode", "ItemDim1Code", "Barcode");

                    b.HasIndex("Barcode");

                    b.HasIndex("ColorCode");

                    b.HasIndex("ItemCode");

                    b.HasIndex("ItemDim1Code");

                    b.ToTable("trStocks");
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.BsBasePrice", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdLanguage", "CdLanguage")
                        .WithMany("BsBasePrices")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdCountry", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdCurrency", "CdCurrency")
                        .WithMany("CdCountries")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdLanguage", "CdLanguage")
                        .WithMany("CdCountries")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdCurrency", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdLanguage", "CdLanguage")
                        .WithMany("CdCurrencies")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.CdItem", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.BsItemDimType", "BsItemDimType")
                        .WithMany("CdItems")
                        .HasForeignKey("ItemDimTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItemTaxGr", "CdItemTaxGr")
                        .WithMany("CdItems")
                        .HasForeignKey("ItemTaxGrCode");

                    b.HasOne("v3Complation.Entities.Concrete.BsItemType", "BsItemType")
                        .WithMany("CdItems")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdUnitOfMeasure", "CdUnitOfMeasure")
                        .WithMany("CdItems")
                        .HasForeignKey("UnitOfMeasureCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemBarcode", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdBarcodeType", "CdBarcodeType")
                        .WithMany("PrItemBarcodes")
                        .HasForeignKey("BarcodeTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdColor", "CdColor")
                        .WithMany("PrItemBarcodes")
                        .HasForeignKey("ColorCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithMany("PrItemBarcodes")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItemDim1", "CdItemDim1")
                        .WithMany("PrItemBarcodes")
                        .HasForeignKey("ItemDim1Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.BsItemType", "BsItemType")
                        .WithMany("PrItemBarcodes")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdUnitOfMeasure", "CdUnitOfMeasure")
                        .WithMany("PrItemBarcodes")
                        .HasForeignKey("UnitOfMeasureCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemBasePrice", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.BsBasePrice", "BsBasePrice")
                        .WithMany("PrItemBasePrices")
                        .HasForeignKey("BasePriceCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdCountry", "CdCountry")
                        .WithMany("PrItemBasePrices")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdCurrency", "CdCurrency")
                        .WithMany("PrItemBasePrices")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithMany("PrItemBasePrices")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.BsItemType", "BsItemType")
                        .WithMany("PrItemBasePrices")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemHierarchy", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdHierarchy", "CdHierarchy")
                        .WithMany("PrItemHierarchies")
                        .HasForeignKey("HierarchyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithMany("PrItemHierarchies")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemNote", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithOne("PrItemNote")
                        .HasForeignKey("v3Complation.Entities.Concrete.PrItemNote", "ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemPhoto", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdColor", "CdColor")
                        .WithMany("PrItemPhotos")
                        .HasForeignKey("ColorCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithMany("PrItemPhotos")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.BsItemType", "BsItemType")
                        .WithMany("PrItemPhotos")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.PrItemVariant", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.CdColor", "CdColor")
                        .WithMany("PrItemVariants")
                        .HasForeignKey("ColorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithMany("PrItemVariants")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItemDim1", "CdItemDim1")
                        .WithMany("PrItemVariants")
                        .HasForeignKey("ItemDim1Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.BsItemType", "BsItemType")
                        .WithMany("PrItemVariants")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("v3Complation.Entities.Concrete.TrStock", b =>
                {
                    b.HasOne("v3Complation.Entities.Concrete.PrItemBarcode", "PrItemBarcode")
                        .WithMany("TrStocks")
                        .HasForeignKey("Barcode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdColor", "CdColor")
                        .WithMany("TrStocks")
                        .HasForeignKey("ColorCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItem", "CdItem")
                        .WithMany("TrStocks")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.CdItemDim1", "CdItemDim1")
                        .WithMany("TrStocks")
                        .HasForeignKey("ItemDim1Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v3Complation.Entities.Concrete.BsItemType", "BsItemType")
                        .WithMany("TrStocks")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
